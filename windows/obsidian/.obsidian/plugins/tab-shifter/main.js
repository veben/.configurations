/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PluginWrapper
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/plugins/NextTabPlugin.ts
var import_obsidian = require("obsidian");

// src/share.ts
var supportedViewTypes = "markdown";
var getParentsForEachLeaf = (allLeaves) => {
  const allTabGroupsMap = /* @__PURE__ */ new Map();
  const allTabGroups = [];
  allLeaves.forEach((l, idx) => {
    const leafParent = l.parent;
    if (!leafParent || leafParent.type !== "tabs") {
      console.error(`Unexpected parent of leaf of type ${leafParent.type}, expected 'tabs'. This is not supported 
				and this tab will be skipped`);
      return;
    }
    if (!allTabGroupsMap.get(leafParent.id)) {
      allTabGroupsMap.set(leafParent.id, leafParent);
      allTabGroups.push(leafParent.id);
    }
  });
  return [allTabGroupsMap, allTabGroups];
};

// src/generated/envConstants.ts
var NODE_ENV = "production";

// src/env.ts
var env = null;
var getEnvVars = () => {
  if (env === null) {
    env = {
      NODE_ENV,
      //@ts-ignore
      prod: NODE_ENV === "production"
    };
  }
  return env;
};

// src/plugins/NextTabPlugin.ts
var env2 = getEnvVars();
var NextTabPlugin = class extends import_obsidian.Plugin {
  // note these defaults conflict with nav fwd back...but those seem to do nothing
  async onload() {
    this.addCommand({
      id: "focus-next-tab",
      name: "Focus next tab",
      callback: () => this.focusTab(1),
      hotkeys: env2.prod ? void 0 : [
        {
          modifiers: ["Meta", "Alt"],
          // "Mod" is Ctrl on Windows/Linux and Cmd on Mac
          key: "ArrowRight"
          // The default hotkey, for example, Ctrl+H or Cmd+H
        }
      ]
    });
    this.addCommand({
      id: "focus-prev-tab",
      name: "Focus prev tab",
      callback: () => this.focusTab(-1),
      hotkeys: env2.prod ? void 0 : [
        {
          modifiers: ["Meta", "Alt"],
          // "Mod" is Ctrl on Windows/Linux and Cmd on Mac
          key: "ArrowLeft"
          // The default hotkey, for example, Ctrl+H or Cmd+H
        }
      ]
    });
  }
  async focusTab(leftOrRight) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf) {
      console.log("No active leaf, so cannot go to next tab");
      return;
    }
    const activeFile = activeLeaf.view.file;
    if (!activeFile) {
      console.log("No active file; not sure if this is is unexpected; won't change view");
      return;
    }
    const allLeaves = this.app.workspace.getLeavesOfType(supportedViewTypes);
    if (allLeaves.length <= 1) {
      console.log(`0 or 1 leaves; no next/prev tab to go to`);
      return;
    }
    const currIdx = allLeaves.findIndex((leaf) => leaf.id == activeLeaf.id);
    let next = currIdx + leftOrRight;
    if (next >= allLeaves.length) {
      next = 0;
    } else if (next < 0) {
      next = allLeaves.length - 1;
    }
    const nextLeaf = allLeaves[next];
    this.app.workspace.setActiveLeaf(nextLeaf, { focus: true });
  }
};

// src/plugins/TabShifterPlugin.ts
var import_obsidian2 = require("obsidian");
var env3 = getEnvVars();
var TabShifterPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.addCommand({
      id: "move-tab-next",
      name: "Move tab to the next tab group",
      callback: () => this.moveTabToNextGroup(1),
      hotkeys: env3.prod ? void 0 : [
        {
          modifiers: ["Ctrl", "Alt"],
          // "Mod" is Ctrl on Windows/Linux and Cmd on Mac
          key: "]"
          // The default hotkey, for example, Ctrl+H or Cmd+H
        }
      ]
    });
    this.addCommand({
      id: "move-tab-prev",
      name: "Move tab to the prev tab group",
      callback: () => this.moveTabToNextGroup(-1),
      hotkeys: env3.prod ? void 0 : [
        {
          modifiers: ["Ctrl", "Alt"],
          // "Mod" is Ctrl on Windows/Linux and Cmd on Mac
          key: "["
          // The default hotkey, for example, Ctrl+H or Cmd+H
        }
      ]
    });
  }
  async moveTabToNextGroup(leftOrRight) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf) {
      console.log("No active leaf, so cannot move tab to next group");
      return;
    }
    const activeFile = activeLeaf.view.file;
    if (!activeFile) {
      console.log("No active file, can't determine what to open in new tab");
      return;
    }
    const allLeaves = this.app.workspace.getLeavesOfType(supportedViewTypes);
    if (allLeaves.length <= 1) {
      console.log(`0 or 1 leaves; nothing to move`);
      return;
    }
    const [allTabGroupsMap, allTabGroups] = getParentsForEachLeaf(allLeaves);
    if (allTabGroups.length === 0) {
      console.error("leaves present but no tab groups found");
      return;
    }
    let newLeaf = null;
    if (allTabGroups.length === 1) {
      newLeaf = this.app.workspace.getLeaf("split", "vertical");
    } else {
      const leafParentId = activeLeaf.parent.id;
      const currentTabGroupIndex = allTabGroups.findIndex((x) => x === leafParentId);
      let next = currentTabGroupIndex + leftOrRight;
      if (next >= allTabGroups.length) {
        next = 0;
      } else if (next < 0) {
        next = allTabGroups.length - 1;
      }
      const tabGroupToOpenIn = allTabGroupsMap.get(allTabGroups[next]);
      if (!tabGroupToOpenIn) {
        throw new Error("invalid control flow: expected tab group does not exist. Please file a bug");
      }
      const lastIdxInNewTabGroup = tabGroupToOpenIn.children.length;
      newLeaf = this.app.workspace.createLeafInParent(
        tabGroupToOpenIn,
        lastIdxInNewTabGroup
      );
    }
    activeLeaf.detach();
    await newLeaf.openFile(activeFile);
  }
};

// src/main.ts
var pluginList = [
  TabShifterPlugin,
  NextTabPlugin
];
var PluginWrapper = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.pluginInstances = [];
  }
  async onload() {
    for (const plugin of pluginList) {
      this.pluginInstances.push(new plugin(this.app, this.manifest));
    }
    this.pluginInstances.forEach((p) => {
      p.onload();
    });
  }
  async unload() {
    this.pluginInstances.forEach((p) => {
      p.unload();
    });
  }
};
